/**
Recursive DFS solution in which we try to find if x and y exists. If so, then store their parents and depth level. With this info we can conclude that they're cousins or not. 
tn = O(n) where n is the num of elements in the tree
sc= O(h) height of the recursive stack or height of tree
*/
class Solution {
    int x_level;
    int y_level;
    TreeNode x_root;
    TreeNode y_root;
    
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null) return false;
        
        dfs(root, x, y, 0, null);
        return x_level == y_level && x_root != y_root;
    }
    
    private void dfs(TreeNode root, int x, int y, int level, TreeNode parent){
        
        // edge
        if(root == null) return;
        // action
        if(root.val == x){
            x_level = level;
            x_root = parent;
        }else if(root.val == y){
            y_level = level;
            y_root = parent;
        }
        // recurse
        dfs( root.left, x, y, level+1,root);
        dfs( root.right, x, y,level+1, root);
        
    }
}

/// DFS ////

/**
Iterative BFS solution in which we consider elements of the particular level and compare the requirements. 
tn = O(n)
s =(2^h)
*/

class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        
        if(root == null) return false;
        
        Queue<TreeNode> q = new LinkedList<>();
        
        
        q.add(root);
        while(!q.isEmpty()){
            
            int size = q.size();
            boolean x_found = false;
            boolean y_found = false;
            for(int i= 0; i< size; i++){
                TreeNode cur = q.poll();
                if(cur.val == x) x_found = true;
                if(cur.val == y) y_found = true;
                if(cur.left != null && cur.right != null){
                    // check to see if both x,y might belong to same element
                    if(cur.left.val == x && cur.right.val == y) return false; // false coz cannot belong to same parent
                    if(cur.right.val == x && cur.left.val == y) return false;
                    
                }
                    if(cur.left!= null ) q.add(cur.left);
                    if(cur.right!= null ) q.add(cur.right);
            }
            if(x_found && y_found) return true;

        }
        return false;
    }
}
