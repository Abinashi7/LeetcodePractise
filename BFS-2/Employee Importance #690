/**
Solving with DFS. We can store every node in the hashmap to make the lookup efficient and iterate over the subordinated and increasing the importance value simultaneously. 
t(n) = O(V + E)
s(c) = O(h) height of the tree
*/


class Solution {
    HashMap<Integer, Employee> map; 
    int importance;
    public int getImportance(List<Employee> employees, int id) {
        importance= 0; 
        
        if(employees == null) return importance;
        
        map = new HashMap<>();
        for(Employee emp: employees){
            map.put(emp.id, emp);
        }
        dfs(id);
        
        return importance;
    }
    
    private void dfs(int id){
        
        Employee cur = map.get(id);
        importance += cur.importance;
        
        for(int sub: cur.subordinates){
            dfs(sub);
        }
    }
}
