/**
Recursive solution
tn = O(n)
sc = O(h) 
*/
class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        if(root == null) return true;
        
        return helper(root.left, root.right);
        
    }
    
    private boolean helper(TreeNode l, TreeNode r){
        // base
        if(r == null && l == null) return true;
        // logic
        if( l == null || r == null || l.val != r.val ) return false;
        // recurse
        return helper(l.left, r.right) && helper(l.right, r.left);

    }
}


// iterative solution using stacks
class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        Stack<TreeNode> s = new Stack<>();
       
        s.push(root.left);
        s.push(root.right);
        
        while(!s.isEmpty()){
            // [3,3,4,4] 
            TreeNode left = s.pop(); 
            TreeNode right = s.pop(); 
            if(left == null && right == null) continue;
            if(left == null || right == null || left.val != right.val) return false;
            
            s.push(left.left); // []
            s.push(right.right);
            
            s.push(left.right);
            s.push(right.left);
        }
        return true;
    }
}
