/** This is a brute force recursive solution. Basically, we visit every node until leaf and
add the sum. If it is matching the target, we add in the resultant array.
Tn = O(n^2) copying of each element to a new array makes it n square
sc = H*n where H is the height of the tree and n is the max num of elements in array
*/
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    int target;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        
        if(root == null) return result;
        List<Integer> ls = new ArrayList<>();
        target = targetSum;        
        
        helper(root, ls, 0);
        
        return result;
    }
    
    
    private void helper(TreeNode root, List temp, int sum){
        // base
        if(root == null) return;
        // logic
        sum += root.val; //5, 9, 
        temp.add(root.val); // [5, 9]
        if(root.left == null && root.right==null){
            if(sum == target){
               result.add(temp); 
            } 
        }
        
        helper(root.left, new ArrayList<>(temp), sum); // [5]
        helper(root.right, new ArrayList<>(temp), sum);
        
    }
}


/**
Optimized solution where instead of copying array elements in each of the recursive call,
we undo the decision from the last branch by backtracking and move on to other nodes and 
see if the branch sum matches with the target
Tn = O(n)
sc = O(n)
*/
class Solution {
    List<List<Integer>> result;
    int target;
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        result = new ArrayList<>();
        target = targetSum;
        List<Integer> temp = new ArrayList<>();
        
        helper(root, temp, 0);
        
        return result;
    }
    
    
    private void helper(TreeNode root, List arr, int sum){
        // base
        if(root == null) return;
        // action
        
        sum += root.val;
        arr.add(root.val);
        if(root.left == null && root.right == null && sum ==target){
                result.add(new ArrayList<>(arr));
        }
        // recurse
        helper(root.left, arr, sum);
        helper(root.right, arr, sum);
        
        // backtrack
        arr.remove(arr.size()-1); // undoing the last decision while recursing back

        
    }
}
