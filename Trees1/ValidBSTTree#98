/**
This is an iterative stack solution. This mimics the recursion that happens in the stack space. 
tn = O(n)
sc = O(h) where h is the height of the tree
*/
class Solution {
    
    public boolean isValidBST(TreeNode root) {
        
        if(root == null ) return false;
         
        Stack<TreeNode> st = new Stack<>();
        TreeNode prev = null;
        while(root != null || !st.isEmpty()){
            
            while(root != null){ // explore all lefts of cur node
                
                st.push(root);
                root = root.left;
            }
            
            
            root = st.pop();
            
            // if valid bst rule is being breached 
            if(prev != null && prev.val >= root.val) return false; 
            prev = root;
            root = root.right; // exploring the right child of cur node
        }
        
        return true; 
        
    }
}

/**
This is recursive solution 
tn = O(n)
sc = O(h) where h is the max height of the recursive stack
*/
class Solution {
    TreeNode prev = null;
    public boolean isValidBST(TreeNode root) {
        
       return inorder(root);
        
    }
    
    private boolean inorder(TreeNode root){
        // base case
        if(root == null) return true;
        // logic
        if( !inorder(root.left) ) return false;
        
        
        if(prev != null && prev.val >= root.val) return false; 
        prev = root;
        return inorder(root.right);
        
    }
}
