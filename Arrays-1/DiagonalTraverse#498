class Solution {
    // tc = O(m*n)
    // Sc = O(1) because we're returning array as the answer
    public int[] findDiagonalOrder(int[][] mat) {
        
        // This can be solved by paying attention at the directions
        // When the direction is up or down, change rows and cols accordingly
        
        int m = mat.length;
        int n = mat[0].length;
        int dir=1;
        // resultant array
        int result[] = new int[m*n];
        
        int i = 0;
        int r=0, c=0;
        while(i < m*n){
            // inserting the cur element in the resultant array
            result[i] = mat[r][c];
            // when the direction is up
            if(dir == 1){
                if(c == n-1){ // when hitting the border on the column side
                    r++; dir=-1;
                }else if(r == 0){ // when hitting the border on the row side
                    c++; dir=-1;
                }else{
                    r--; c++; // else if our current element is not touching the borders
                }
                // when the direction is down
            }else{
                if( r == m-1){
                    c++; dir=1;
                }else if(c == 0){
                    r++; dir=1;
                }else{
                    r++; c--;
                }
            }
            
            i++; //moving the index of the resultant array
        }
        
        
        return result;
    }
}
