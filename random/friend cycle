import java.util.*;
/**
 * Friend Cycle:
 * Sample Input:
 * employees = [
 *   "1, Bill, Engineer",
 *   "2, Joe, HR",
 *   "3, Sally, Engineer",
 *   "4, Richard, Business",
 *   "6, Tom, Engineer"
 * ]
 *
 * friendships = [
 *   "1, 2",
 *   "1, 3",
 *   "3, 4"
 * ]
 * Pt 1.Given employees and friendships, find all adjacencies that denote the friendship, A friendship is bi-directional/mutual so if 1 is friends with 2, 2 is also friends with 1.
 *
 * Sample Output:
 * Output:
 * 1: 2, 3
 * 2: 1
 * 3: 1, 4
 * 4: 3
 * 6: None
Java Solution: O(n) time?(worst case n^2 relationship between n employees, takes n^2), O(n) space
 * */
class test2{
    public static List<String> friendCircle(String[] emps, String[] frndshps){

        HashMap<String, ArrayList<String>> map = new HashMap<>();

        List<String> ans = new ArrayList<>();

        // get all the emp ids
        for(String emp: emps){

            map.put(""+emp.charAt(0), new ArrayList<>());
        }

        for( String friends: frndshps){

            String[] twoFriends = friends.split(",");

            String friendOne = twoFriends[0];
            String friendTwo = twoFriends[1].trim();

            map.get(friendOne).add(friendTwo);
            map.get(friendTwo).add(friendOne);

        }
        for(String id: map.keySet()){
            StringBuilder sb = new StringBuilder();

            if(map.get(id).size() > 0){
                sb.append(id).append(": ");
                sb.append(map.get(id));
            }else{
                sb.append(id).append(":").append(" none");
            }
            ans.add(sb.toString());
        }




        return ans;

    }


    public static void main(String[] args){

        String[] emps = {
                "1, Bill, Engineer",
                "2, Joe, HR",
                "3, Sally, Engineer",
                "4, Richard, Business",
                "6, Tom, Engineer"
        };

        String[] frndshps = {
                "1, 2",
                "1, 3",
                "3, 4"
        };

        System.out.print(friendCircle(emps, frndshps));
    }


}
