/** BFS solution*/
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        
        if(mat == null || mat.length == 0) return mat;
        
        Queue<int []> q = new LinkedList<>();
        
        for(int i=0; i<mat.length; i++){
            for(int j=0; j<mat[0].length; j++){
                if(mat[i][j] == 0){
                   q.add(new int[]{i, j}); 
                } else{
                    mat[i][j] = -1;
                } 
            }
        }
        
        int [][] dirs = {{0,1},{1,0},{-1,0},{0,-1}};
        int m= mat[0].length, n= mat.length;
        while(!q.isEmpty()){
            int [] cur = q.poll();
            
            for(int [] dir: dirs){
                int r= cur[0] + dir[0];
                int c= cur[1] + dir[1];
                
                if( r>= 0 && r < n && c >=0 && c < m && mat[r][c] == -1){
                    mat[r][c] = mat[cur[0]][cur[1]] +1;
                    q.add(new int[]{r,c});
                }
            }
        }
        
        return mat;
        
    }
}
