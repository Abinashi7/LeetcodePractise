/**
Dynamic programming solution using iteration
tn = O(m*n)
sc = O(m*n)
*/
class Solution {
    public int uniquePaths(int m, int n) {
        
        int[][] dp = new int[m+1][n+1];
        
        dp[m-1][n-1] = 1;
        
        for(int i=m-1; i>=0; i--){
            for(int j=n-1; j>=0; j--){
                dp[i][j] += dp[i][j+1] + dp[i+1][j];
            }
        }
        
        return dp[0][0];
        
    }
}

// recursive solution
class Solution {
    public int uniquePaths(int m, int n) {
        
        return dfs(0,0,m,n);
        
    }
    
    
    private int dfs(int i, int j, int m, int n){
        
        
        //edge
        if( i >=n || j >= m) return 0;
        
        if(i == n-1 && j == m-1) return 1;
        //action and recurse
        int left = dfs(i+1, j, m, n);
        int right = dfs(i, j+1, m, n);
        
        return left+right;
        
    }
}
