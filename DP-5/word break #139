/**
DP solution: 
TC = O(n^3) where n is the num of elements in the s string and considering lookup time of a string in the hashset
*/
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> set = new HashSet<>(wordDict);
        boolean dp[] = new boolean[s.length()+1]; // extra size of the dp array to consider the last element in the string s
        dp[0] = true; // assuming empty string is valid
        for(int i=1; i<dp.length; i++){
            for(int j=0; j < i; j++){
                
                if(dp[j] && set.contains(s.substring(j,i))){ // if the start index of the particular substring is valid, check further parts of that substring  
                    dp[i] = true; // and mark it as true
                }
            }
        }
        
        return dp[dp.length-1];
        
    }
}
