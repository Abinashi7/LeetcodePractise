/**
This problem can be solved by counting the edges of a person in the trust matrix. If a person has n-1 people trusting that means judge.
T(N) = O(e+v) where e is num of edges and v is number of vertices
sc = O(e+v) where e is num of edges and v is number of vertices
*/
class Solution {
    public int findJudge(int n, int[][] trust) {
        
        int []result = new int[n];
        
        for(int i=0; i<trust.length; i++){
            result[trust[i][0]-1]--;
            result[trust[i][1]-1]++;
        }
        
        for(int i=0; i < result.length; i++){
            if(result[i] == n-1){
                return i+1;
            }
        }
        
        return -1;
    }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> RECURSIVE >>>>>>>>>>>>>>

/**
Recursive solution using DFS approach. Using queue data structure
T(n) = m*n where m is num of rows and n is num of cols
s(c) = recursive stack space
*/
class Solution {
    int dirs[][];
    int m, n;
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        
         m = maze.length; n = maze[0].length;
        
        dirs = new int [][]{{1,0}, {0,1}, {-1, 0}, {0, -1}};
        maze[start[0]][start[1]] = 2; // marking path as visited
        return dfs(maze, start, destination);
        
    }
    
    private boolean dfs(int[][] maze, int[] start, int[] destination){
        // base
        if( start[0] == destination[0] && start[1] == destination[1]) return true;
        
        // logic and recurse
        
            for( int [] dir: dirs){
                int r = start[0], c = start[1];
                
                while(r >= 0 && r <m && c >=0 && c < n && maze[r][c] != 1){
                    // if the above condition is met then take a particular direction
                    r += dir[0];
                    c+= dir[1];
                }
                
                // to prevent the overshoot of the boundaries
                // overshooting means the ball has to stay right next to the bouday after stopping..not overshooting the boundary
                r -= dir[0];
                c -= dir[1];
                
                // if this is not an already seen path
                if(maze[r][c] != 2){
                    maze[r][c] = 2;
                   if( dfs(maze, new int[] {r, c}, destination)) return true;
                }
            }
        return false;
    }
}
