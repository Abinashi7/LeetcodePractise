/**
This is an iterative Breath first traversal solution. In this method we can use Queue to store elements of a particular level and add that level's chilren to the queue. 
tn = O(n) where n is num of elements in the tree
sc = O(2^h) or O(n/2) where h is the height of tree. n is num of elements in the tree
The space complexity is n/2 because if it is a complete tree the leaf nodes will be qual to n / 2
*/
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ls = new ArrayList<>();
        if(root == null) return ls;

            
        
        Queue<TreeNode> q = new LinkedList<>();
        
        q.add(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> temp = new ArrayList<>();
            
            for(int i=0; i < size; i++){
                TreeNode cur = q.poll();
                
                if(cur.left != null) q.add(cur.left);
                if(cur.right != null) q.add(cur.right);
                temp.add(cur.val);
            }
            
            ls.add(temp);
        }
        
        return ls;
    }
}

====== DFS ====

/**
This is a recursive depth first solution putiing elements in the resultant array in the level-order manner. We can use levels as indices that we can use in the resultant array. if an element belongs to a particular level, it will be pushed in that level's list inside the resultant array.
tn = O(n) where n is the num of elements in tree
sc = O(h)  height of the tree
*/
class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> levelOrder(TreeNode root) {
        result = new ArrayList<>();
        
        if(root == null) return result;
        
        dfs(root, 0);
        
        return result;
    }
    
    
    private void dfs(TreeNode root, int level){
        
        // base
        if(root == null) return;
        // action
        if( level == result.size()){
            result.add(new ArrayList<>());
        }
        result.get(level).add(root.val);
        //recurse
        dfs(root.left, level+1);
        dfs(root.right, level+1);
        
        
    }
}
