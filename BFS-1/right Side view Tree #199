/**
Iterative BFS solution. We can notice that onlu the right side view of the binary tree is required. if an array of a particular level's elements are taken, the last element of the array will be always on the right side view. 
Tn = O(n) where n is the num of elements in the tree
sc = O(2^h) or n/2 = n .. where h is the height of the tree. N is the num of elmts in tree
*/
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> ls = new ArrayList<>();
        if(root == null) return ls;
        
        Queue<TreeNode> q = new LinkedList<>();
        
        q.add(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0; i<size; i++){
                TreeNode cur = q.poll();  
                if(i == size-1) ls.add(cur.val); // always getting the last element 
                
                if(cur.left != null) q.add(cur.left);
                if(cur.right != null) q.add(cur.right);
            }
        }
        
        return ls;
        
    }
}

====== DFS Solution ======

/**
Recurive DFS solution. Taking help of level numbers to always get the elements in the right side view. However, rather than recursing on the left side first, we will recurse right side first so that the right side view elements can be added first in the resultant list.
Tn = O(n) where n is the num of elements in the tree
sc = O(2^h) or n/2 = n .. where h is the height of the tree. N is the num of elmts in tree
*/
class Solution {
    List<Integer> ls;  
    public List<Integer> rightSideView(TreeNode root) {
        ls = new ArrayList<>();
        if(root == null) return ls;
        
        dfs(root,0);
        
        return ls;
    }
    private void dfs(TreeNode root, int level){
        // base
        if(root == null) return;
        // action
        if(level == ls.size()){
            ls.add(root.val);
        }
        // recurse
        dfs(root.right, level+1);
        dfs(root.left, level+1);
        
    }
}
