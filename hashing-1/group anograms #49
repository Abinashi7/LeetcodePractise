/**
In this solution we can calculate the hashCode of each string. This manual hasCode is created using the prime number to make sure there is min collision. If hashCode of the two strings are same, it means it is an anogram. 
Tn = O(n*k) where n is the len of the array and k is length of the total chars inside the whole array
sc = O(n)
*/
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        

        HashMap<Long, List<String> > map = new HashMap<>();
        
        
        for(int i=0; i < strs.length; i++){
            String s = strs[i];
            
            Long hashCode = hashCode(s);
            if(!map.containsKey(hashCode)){
                map.put(hashCode, new ArrayList());
            }
            map.get(hashCode).add(s);
        }
        
        return new ArrayList(map.values());
        
    }
    
    
    private long hashCode(String s){
        
        int primes [] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103};
        long result = 1;
        for(int i = 0; i < s.length(); i++){
            
            char c = s.charAt(i);
            result *= primes[c -'a'];
        }
        return result;
    }
}
