// Iterative solution using extra space
class Solution {
    TreeNode prev, first, last;
    boolean flag;
    public void recoverTree(TreeNode root) {
        if (root == null) return ;
        helper(root);
        if(first != null && last != null){
            int temp = first.val;
            first.val = last.val;
            last.val = temp;
        }
        
    }
    
    private void helper(TreeNode root){
        
        
        Stack<TreeNode> st = new Stack<>();
        
        while(root != null || !st.isEmpty()){
            
            while(root != null){
               
               st.add(root);
              
               root = root.left;  
            }
            
            root = st.pop(); // [1]
            if(prev != null && root.val < prev.val){
                if(!flag){
                    flag = true;
                    first = prev; last = root;
                }else{
                    last = root;
                }
            }
            prev = root;
            root = root.right;
            
        }
    }
}

>>>>>>>>>>>>>>>>>>>>>>.
class Solution {
    TreeNode prev, first, last;
    boolean flag;
    public void recoverTree(TreeNode root) {
        if (root == null) return ;
        helper(root);
        if(first != null && last != null){
            int temp = first.val;
            first.val = last.val;
            last.val = temp;
        }
        
    }
    
    private void helper(TreeNode root){
        if(root == null) return;
        
            helper(root.left);
            if(prev != null && root.val < prev.val){
                if(!flag){
                    flag = true;
                    first = prev; last = root;
                }else{
                    last = root;
                }
            }
            prev = root;
            helper(root.right);
            
        }
    }
