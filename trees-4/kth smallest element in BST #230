/**
Recursive solution. Using Inorder traversal to iterate. When recursive stack is coming back, decrease K until it's 0. 
t(n) = O(n) where n is num of elements in tree. Worst case = skewed tree
Sc = O(n)
*/
class Solution {
    int count;
    int result;
    public int kthSmallest(TreeNode root, int k) {
        count = k;
        
        helper(root);
        
        return result;
    }
    
    
    private void helper(TreeNode root){
        // base
        if(root == null) return;        
        // recurse and action
        helper(root.left);
        count --;
        if(count == 0){
           result = root.val;
            return;
        } 
        
        helper(root.right);
    }
}

>>>>>>>>>>>>>>>>> Iterative solution >>>>>>>>>>>>>

/**
Iterative solution. Using stack. Iterating in Inorder and building stack.
Tn = O(n)
sc = O(n)
*/
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        
        int count = k;
        Stack<TreeNode> st = new Stack<>();
        
        while(root!= null || !st.empty()){
            
            while(root != null){
                
                st.push(root);
                root = root.left;
            }
            
            root = st.pop();
            count --;
            if(count == 0) return root.val;
            root = root.right;
        }
        
        return count;
    }
}
