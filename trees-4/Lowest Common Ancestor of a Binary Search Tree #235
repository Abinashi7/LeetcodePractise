/* recursive solution. Since it is BST, we will check p and q to narrow down the search or use Binary search method. 
t(n) = O(n) where n is num of elements in tree. Worst case = skewed tree
Sc = O(n)
**/
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) return null;
        
        if(root.val > p.val && root.val > q.val){
            return lowestCommonAncestor(root.left, p, q);
        }else if(root.val < p.val && root.val < q.val){
            return lowestCommonAncestor(root.right, p, q);
        }else{
            return root;
        }
    }
}

>>>>>>>>>>>>>> Iterative Solution >>>>>>>>>>>>>>

/* Iterative solution 
t(n) = O(n) where n is num of elements in tree. Worst case = skewed tree
Sc = O(n)
**/
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) return null;
        
        
        while(root != null){
            if(root.val > p.val && root.val > q.val){
                root = root.left;
            }else if(root.val < p.val && root.val < q.val){
                root = root.right;
            }else{
                return root;
            }
        }
        
        return root;
    }
}
